#ifndef SCOREBOARD_HPP_
#define SCOREBOARD_HPP_

#include <systemc>
#include <uvm>
#include <deque>

#include "dti_subscriber.hpp"
#include "dti_packet.hpp"
#include "data_types.hpp"
#include <fc4sc.hpp>
#include "scoreboard_cg.hpp"

{% for port in uvm.dut.intfs %}
  using {{port.basename}}_packet_type = {{uvm.dut.packet_type_str(port)}};
{% endfor %}


class scoreboard : public uvm::uvm_scoreboard
{
public:
{% for port in uvm.dut.intfs %}
  {{uvm.dut.container_type_str(port)}} {{port.basename}}_data;
  sc_core::sc_event {{port.basename}}_e;
{% endfor %}

{% for port in uvm.dut.intfs %}
  uvm::uvm_analysis_export<{{port.basename}}_packet_type> {{port.basename}}_listener_imp;
{% endfor %}

  #ifdef SCOREBOARD_CGROUPS
  SCOREBOARD_CGROUPS
  #endif

void check();

{% for port in uvm.dut.intfs %}
  void {{port.basename}}_write(const {{port.basename}}_packet_type &p)
  {
  {% if uvm.dut.is_queue(port) %}
    {% if uvm.dut.queue_lvl(port) > 1 %}
      if({{port.basename}}_data.size() == 0)
      {{port.basename}}_data.emplace_back();

      {{port.basename}}_data.back().push_back(p.data.data);
    {% else %}
      {{port.basename}}_data.push_back(p.data.data);
    {% endif %}

    {% for i in range(0, uvm.dut.queue_lvl(port)-1) %}
      if(p.data.eot[{{i}}]){
        {{port.basename}}_data.emplace_back();
    {% endfor %}
    {% for i in range(0, uvm.dut.queue_lvl(port)-1) %}
      }
    {% endfor %}
  {% else %}
    {{port.basename}}_data.push_back(p.data);
  {% endif %}
  UVM_INFO("{{port.basename.upper()}}_WRITE: ", p.str(), uvm::UVM_MEDIUM);
  {{port.basename}}_e.notify();

  }
{% endfor %}

{% for port in uvm.dut.intfs %}
  dti_subscriber<{{port.basename}}_packet_type, scoreboard, &scoreboard::{{port.basename}}_write> *{{port.basename}}_listener;
{% endfor %}

scoreboard(uvm::uvm_component_name name) : uvm::uvm_scoreboard(name){}
UVM_COMPONENT_UTILS(scoreboard);

  void build_phase(uvm::uvm_phase& phase)
  {
    uvm::uvm_scoreboard::build_phase(phase);
{% for port in uvm.dut.intfs %}
  uvm::uvm_config_db<uvm_object*>::set(this, "{{port.basename}}_listener", "sb", this);

    {{port.basename}}_listener = dti_subscriber<{{port.basename}}_packet_type, scoreboard, &scoreboard::{{port.basename}}_write  >::type_id::create("{{port.basename}}_listener", this);
    assert({{port.basename}}_listener);

{% endfor %}
}

  void connect_phase(uvm::uvm_phase& phase)
  {
{% for port in uvm.dut.intfs %}
    {{port.basename}}_listener_imp.connect({{port.basename}}_listener->analysis_export);
{% endfor %}
  }

  void run_phase(uvm::uvm_phase &phase) {
    check();
  }

};
#endif
